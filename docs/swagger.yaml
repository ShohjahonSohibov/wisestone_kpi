basePath: /
definitions:
  models.CreateTeam:
    properties:
      description_en:
        type: string
      description_kr:
        type: string
      description_uz:
        type: string
      leader_id:
        type: string
      name_en:
        type: string
      name_kr:
        type: string
      name_uz:
        type: string
    required:
    - leader_id
    - name_en
    - name_kr
    - name_uz
    type: object
  models.CreateUser:
    properties:
      email:
        type: string
      full_name:
        type: string
      password:
        type: string
      position:
        type: string
      role_id:
        type: string
    required:
    - email
    - full_name
    - password
    type: object
  models.ListTeamsResponse:
    properties:
      count:
        type: integer
      teams:
        items:
          $ref: '#/definitions/models.Team'
        type: array
    type: object
  models.ListUsersResponse:
    properties:
      count:
        type: integer
      users:
        items:
          $ref: '#/definitions/models.User'
        type: array
    type: object
  models.LoginRequest:
    properties:
      password:
        type: string
      username:
        type: string
    type: object
  models.Team:
    properties:
      created_at:
        type: string
      description_en:
        type: string
      description_kr:
        type: string
      description_uz:
        type: string
      id:
        type: string
      leader_id:
        type: string
      name_en:
        type: string
      name_kr:
        type: string
      name_uz:
        type: string
      updated_at:
        type: string
    required:
    - leader_id
    - name_en
    - name_kr
    - name_uz
    type: object
  models.User:
    properties:
      created_at:
        type: string
      email:
        type: string
      full_name_en:
        type: string
      full_name_kr:
        type: string
      full_name_uz:
        type: string
      id:
        type: string
      password:
        type: string
      position:
        type: string
      role_id:
        type: string
      updated_at:
        type: string
    required:
    - email
    - full_name_en
    - full_name_kr
    - full_name_uz
    - password
    type: object
host: localhost:8080
info:
  contact:
    email: support@wisestonet.com
    name: Developer Team
  description: API for KPI system for Wisestone T Company
  title: KPI System API
  version: "1.0"
paths:
  /api/v1/auth/login:
    post:
      consumes:
      - application/json
      description: Login with email and password
      parameters:
      - description: Login Request
        in: body
        name: credentials
        required: true
        schema:
          $ref: '#/definitions/models.LoginRequest'
      produces:
      - application/json
      responses:
        "200":
          description: 'token: JWT Token'
          schema:
            additionalProperties:
              type: string
            type: object
        "401":
          description: 'error: Unauthorized'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Authenticate an existing user
      tags:
      - Authentication
  /api/v1/teams:
    get:
      consumes:
      - application/json
      description: Get a list of all teams
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: multi_search
        type: string
      - in: query
        name: offset
        type: integer
      - in: query
        name: page
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListTeamsResponse'
        "400":
          description: 'error: Invalid parameters'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all teams
      tags:
      - Teams
    post:
      consumes:
      - application/json
      description: Create a new team with the provided details
      parameters:
      - description: Team Details
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.CreateTeam'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: Team created successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Validation error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new team
      tags:
      - Teams
  /api/v1/teams/{id}:
    delete:
      consumes:
      - application/json
      description: Delete team by ID
      parameters:
      - description: Team Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Team deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Team not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete team
      tags:
      - Teams
    get:
      consumes:
      - application/json
      description: Get team details by id
      parameters:
      - description: Team Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Team'
        "404":
          description: 'error: Team not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get team by id
      tags:
      - Teams
    put:
      consumes:
      - application/json
      description: Update team details by ID
      parameters:
      - description: Team ID
        in: path
        name: id
        required: true
        type: string
      - description: Team Details
        in: body
        name: team
        required: true
        schema:
          $ref: '#/definitions/models.Team'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: Team updated successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Validation error'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: Team not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update existing team
      tags:
      - Teams
  /api/v1/users:
    get:
      consumes:
      - application/json
      description: Get a list of all users
      parameters:
      - in: query
        name: limit
        type: integer
      - in: query
        name: multi_search
        type: string
      - in: query
        name: offset
        type: integer
      - in: query
        name: page
        type: integer
      - enum:
        - asc
        - desc
        in: query
        name: sort_order
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.ListUsersResponse'
        "400":
          description: 'error: Invalid parameters'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: List all users
      tags:
      - Users
    post:
      consumes:
      - application/json
      description: Create a new user with the provided details
      parameters:
      - description: User Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.CreateUser'
      produces:
      - application/json
      responses:
        "201":
          description: 'message: User created successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Validation error'
          schema:
            additionalProperties:
              type: string
            type: object
        "409":
          description: 'error: User already exists'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Create a new user
      tags:
      - Users
  /api/v1/users/{id}:
    delete:
      consumes:
      - application/json
      description: Delete user by email
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User deleted successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Delete user
      tags:
      - Users
    get:
      consumes:
      - application/json
      description: Get user details by id
      parameters:
      - description: User Id
        in: path
        name: id
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.User'
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
        "500":
          description: 'error: Internal server error'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Get user by id
      tags:
      - Users
    put:
      consumes:
      - application/json
      description: Update user details by ID
      parameters:
      - description: User ID
        in: path
        name: id
        required: true
        type: string
      - description: User Details
        in: body
        name: user
        required: true
        schema:
          $ref: '#/definitions/models.User'
      produces:
      - application/json
      responses:
        "200":
          description: 'message: User updated successfully'
          schema:
            additionalProperties:
              type: string
            type: object
        "400":
          description: 'error: Validation error'
          schema:
            additionalProperties:
              type: string
            type: object
        "404":
          description: 'error: User not found'
          schema:
            additionalProperties:
              type: string
            type: object
      summary: Update existing user
      tags:
      - Users
swagger: "2.0"
